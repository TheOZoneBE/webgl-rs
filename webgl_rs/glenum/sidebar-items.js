initSidebarItems({"enum":[["Attachment","Constants passed to `WebGLRenderingContext.framebufferRenderbuffer()`"],["AttributeSize","Constants passed to WebGLRenderingContext.vertexAttribPointer()"],["AttributeType","Constants passed to vertexAttribPointer"],["BlendEquation","Constants passed to WebGLRenderingContext.blendEquation() or WebGLRenderingContext.blendEquationSeparate() to control how the blending is calculated (for both, RBG and alpha, or separately)."],["BlendMode","Constants passed to WebGLRenderingContext.blendFunc() or WebGLRenderingContext.blendFuncSeparate() to specify the blending mode (for both, RBG and alpha, or separately)."],["BufferBase","Passed to bindBufferBase"],["BufferBit",""],["BufferKind","Passed to bindBuffer or bufferData to specify the type of buffer being used."],["BufferParameter",""],["Buffers","Constants passed to WebGLRenderingContext.hint()"],["ColorBuffer","Constants passed to readBuffer"],["CompareMode",""],["Culling","Constants passed to WebGLRenderingContext.cullFace()."],["DataHint",""],["DataType",""],["DepthTest","Constants passed to WebGLRenderingContext.depthFunc()."],["Error","Constants returned from WebGLRenderingContext.getError()."],["Flag",""],["FramebufferKind","Constants passed to WebGLRenderingContext.bindFramebuffer() and other framebuffer methods"],["FramebufferStatus","Constants passed to `WebGLRenderingContext.checkFramebufferStatus()`"],["FrontFaceDirection","Constants passed to WebGLRenderingContext.frontFace()."],["GPUState","Constants passed to fenceSync"],["HintMode","Constants passed to WebGLRenderingContext.hint() mode argument"],["HintTarget","Constants passed to WebGLRenderingContext.hint() target argument"],["InformationType","Constants passed to getInternalformatParameter"],["NotProgramParameter","FIXME categorize values elsewhere"],["Parameter","Constants passed to WebGLRenderingContext.getParameter() to specify what information to return."],["PixelCopyFormat",""],["PixelFormat",""],["PixelReadFormat",""],["PixelStorageMode","Constants passed to WebGLRenderingContext.pixelStorei()"],["PixelType",""],["Primitives","Passed to drawElements or drawArrays to draw primitives."],["ProgramParameter","Constants passed to WebGLRenderingContext.getProgramParameter() TODO decide if im keeping it public or move to shader_program as it is only used internally i think"],["Query","Constants passed to getQuery"],["QueryParameter","Constants passed to getQueryParameter"],["QueryTarget","Constants passed to beginQuery"],["RenderbufferFormat","Constants returned from `WebGLRenderingContext.getRenderbufferParameter()`"],["RenderbufferKind","Constants passed to `WebGLRenderingContext.framebufferRenderbuffer()`"],["RenderbufferParameter","Constants passed to `WebGLRenderingContext.getRenderbufferParameter()`"],["ShaderKind","Constants passed to WebGLRenderingContext.createShader()"],["ShaderParameter","Constants passed to WebGLRenderingContext.getShaderParameter() TODO decide if im keeping it public or move to shader_program as it is only used internally i think"],["ShaderPrecision",""],["StencilAction","Constants passed to WebGLRenderingContext.stencilOp()."],["StencilTest","Constants passed to WebGLRenderingContext.stencilFunc()."],["SyncParameter","Constants passed to getSyncParameter"],["SyncStatus",""],["Texture2DKind","WebGLRenderingContext.texStorage2D() `target` parameter"],["Texture3DKind","WebGLRenderingContext.texStorage3D() `target` parameter"],["TextureBindPoint","WebGLRenderingContext.texImage2D() \"target\" parameter"],["TextureCompression",""],["TextureKind","WebGLRenderingContext.texParameterfi or WebGLRenderingContext.bindTexture() \"target\" parameter"],["TextureMagFilter","WebGLRenderingContext.texParameterfi \"param\" parameter"],["TextureMinFilter","WebGLRenderingContext.texParameterfi \"param\" parameter"],["TextureParameter","WebGLRenderingContext.texParameterfi \"pname\" parameter"],["TextureUnit","A texture unit"],["TextureWrap","WebGLRenderingContext.texParameterfi \"param\" parameter"],["TransformFeedback","Constants passed to bindTransformFeedback"],["TransformFeedbackBufferMode","Passed to transformFeedbackVaryings."],["TransformFeedbackMode","Passed to beginTransformFeedback."],["UniformType","Constants passed to WebGLRenderingContext.hint()"],["VertexAttrib","Constants passed to WebGLRenderingContext.getVertexAttrib()."],["WaitStatus","Constants passed to clientWaitSync"]]});